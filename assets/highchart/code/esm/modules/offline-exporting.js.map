{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v12.3.0 (2025-06-21)\n * @module highcharts/modules/offline-exporting\n * @requires highcharts\n * @requires highcharts/modules/exporting\n *\n * Client side exporting module\n *\n * (c) 2015-2025 Torstein Honsi / Oystein Moseng\n *\n * License: www.highcharts.com/license\n */\nimport * as __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__ from \"../highcharts.js\";\nimport * as __WEBPACK_EXTERNAL_MODULE__exporting_src_js_3afc400f__ from \"./exporting.js\";\n/******/ // The require scope\n/******/ var __webpack_require__ = {};\n/******/ \n/************************************************************************/\n/******/ /* webpack/runtime/compat get default export */\n/******/ (() => {\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = (module) => {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t() => (module['default']) :\n/******/ \t\t\t() => (module);\n/******/ \t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\treturn getter;\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/define property getters */\n/******/ (() => {\n/******/ \t// define getter functions for harmony exports\n/******/ \t__webpack_require__.d = (exports, definition) => {\n/******/ \t\tfor(var key in definition) {\n/******/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t};\n/******/ })();\n/******/ \n/******/ /* webpack/runtime/hasOwnProperty shorthand */\n/******/ (() => {\n/******/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ })();\n/******/ \n/************************************************************************/\n\n;// external [\"../highcharts.js\",\"default\"]\nconst external_highcharts_src_js_default_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"];\nvar external_highcharts_src_js_default_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_namespaceObject);\n;// ./code/es-modules/Extensions/DownloadURL.js\n/* *\n *\n *  (c) 2015-2025 Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n *  Mixin for downloading content in the browser\n *\n * */\n\n/* *\n *\n *  Imports\n *\n * */\n\nconst { isSafari, win, win: { document: doc } } = (external_highcharts_src_js_default_default());\n\nconst { error } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Constants\n *\n * */\nconst domurl = win.URL || win.webkitURL || win;\n/* *\n *\n *  Functions\n *\n * */\n/**\n * Convert base64 dataURL to Blob if supported, otherwise returns undefined.\n *\n * @private\n * @function Highcharts.dataURLtoBlob\n *\n * @param {string} dataURL\n * URL to convert.\n *\n * @return {string | undefined}\n * Blob.\n */\nfunction dataURLtoBlob(dataURL) {\n    const parts = dataURL\n        .replace(/filename=.*;/, '')\n        .match(/data:([^;]*)(;base64)?,([A-Z+\\d\\/]+)/i);\n    if (parts &&\n        parts.length > 3 &&\n        (win.atob) &&\n        win.ArrayBuffer &&\n        win.Uint8Array &&\n        win.Blob &&\n        (domurl.createObjectURL)) {\n        // Try to convert data URL to Blob\n        const binStr = win.atob(parts[3]), buf = new win.ArrayBuffer(binStr.length), binary = new win.Uint8Array(buf);\n        for (let i = 0; i < binary.length; ++i) {\n            binary[i] = binStr.charCodeAt(i);\n        }\n        return domurl\n            .createObjectURL(new win.Blob([binary], { 'type': parts[1] }));\n    }\n}\n/**\n * Download a data URL in the browser. Can also take a blob as first param.\n *\n * @private\n * @function Highcharts.downloadURL\n *\n * @param {string | global.URL} dataURL\n * The dataURL/Blob to download.\n * @param {string} filename\n * The name of the resulting file (w/extension).\n */\nfunction downloadURL(dataURL, filename) {\n    const nav = win.navigator, a = doc.createElement('a');\n    // IE specific blob implementation\n    // Don't use for normal dataURLs\n    if (typeof dataURL !== 'string' &&\n        !(dataURL instanceof String) &&\n        nav.msSaveOrOpenBlob) {\n        nav.msSaveOrOpenBlob(dataURL, filename);\n        return;\n    }\n    dataURL = '' + dataURL;\n    if (nav.userAgent.length > 1000 /* RegexLimits.shortLimit */) {\n        throw new Error('Input too long');\n    }\n    const // Some browsers have limitations for data URL lengths. Try to convert\n    // to Blob or fall back. Edge always needs that blob.\n    isOldEdgeBrowser = /Edge\\/\\d+/.test(nav.userAgent), \n    // Safari on iOS needs Blob in order to download PDF\n    safariBlob = (isSafari &&\n        typeof dataURL === 'string' &&\n        dataURL.indexOf('data:application/pdf') === 0);\n    if (safariBlob || isOldEdgeBrowser || dataURL.length > 2000000) {\n        dataURL = dataURLtoBlob(dataURL) || '';\n        if (!dataURL) {\n            throw new Error('Failed to convert to blob');\n        }\n    }\n    // Try HTML5 download attr if supported\n    if (typeof a.download !== 'undefined') {\n        a.href = dataURL;\n        a.download = filename; // HTML5 download attribute\n        doc.body.appendChild(a);\n        a.click();\n        doc.body.removeChild(a);\n    }\n    else {\n        // No download attr, just opening data URI\n        try {\n            if (!win.open(dataURL, 'chart')) {\n                throw new Error('Failed to open window');\n            }\n        }\n        catch {\n            // If window.open failed, try location.href\n            win.location.href = dataURL;\n        }\n    }\n}\n/**\n * Asynchronously downloads a script from a provided location.\n *\n * @private\n * @function Highcharts.getScript\n *\n * @param {string} scriptLocation\n * The location for the script to fetch.\n */\nfunction getScript(scriptLocation) {\n    return new Promise((resolve, reject) => {\n        const head = doc.getElementsByTagName('head')[0], script = doc.createElement('script');\n        // Set type and location for the script\n        script.type = 'text/javascript';\n        script.src = scriptLocation;\n        // Resolve in case of a succesful script fetching\n        script.onload = () => {\n            resolve();\n        };\n        // Reject in case of fail\n        script.onerror = () => {\n            reject(error(`Error loading script ${scriptLocation}`));\n        };\n        // Append the newly created script\n        head.appendChild(script);\n    });\n}\n/* *\n *\n *  Default Export\n *\n * */\nconst DownloadURL = {\n    dataURLtoBlob,\n    downloadURL,\n    getScript\n};\n/* harmony default export */ const Extensions_DownloadURL = (DownloadURL);\n\n;// external [\"../highcharts.js\",\"default\",\"AST\"]\nconst external_highcharts_src_js_default_AST_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"].AST;\nvar external_highcharts_src_js_default_AST_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_AST_namespaceObject);\n;// external [\"../highcharts.js\",\"default\",\"Chart\"]\nconst external_highcharts_src_js_default_Chart_namespaceObject = __WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__[\"default\"].Chart;\nvar external_highcharts_src_js_default_Chart_default = /*#__PURE__*/__webpack_require__.n(external_highcharts_src_js_default_Chart_namespaceObject);\n;// ./code/es-modules/Extensions/OfflineExporting/OfflineExportingDefaults.js\n/* *\n *\n *  (c) 2010-2025 Torstein Honsi\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n/* *\n *\n *  API Options\n *\n * */\n/**\n * @optionparent exporting\n * @private\n */\nconst exporting = {};\n/* *\n *\n *  Default Export\n *\n * */\nconst OfflineExportingDefaults = {\n    exporting\n};\n/* harmony default export */ const OfflineExporting_OfflineExportingDefaults = (OfflineExportingDefaults);\n\n;// ./code/es-modules/Extensions/OfflineExporting/OfflineExporting.js\n/* *\n *\n *  Client side exporting module\n *\n *  (c) 2015 Torstein Honsi / Oystein Moseng\n *\n *  License: www.highcharts.com/license\n *\n *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n *\n * */\n\n\n\n\nconst { getOptions, setOptions } = (external_highcharts_src_js_default_default());\n\nconst { downloadURL: OfflineExporting_downloadURL, getScript: OfflineExporting_getScript } = Extensions_DownloadURL;\n\nconst { composed, doc: OfflineExporting_doc, win: OfflineExporting_win } = (external_highcharts_src_js_default_default());\n\n\nconst { addEvent, extend, pushUnique } = (external_highcharts_src_js_default_default());\n/* *\n *\n *  Composition\n *\n * */\nvar OfflineExporting;\n(function (OfflineExporting) {\n    /* *\n     *\n     *  Functions\n     *\n     * */\n    /**\n     * Composition function.\n     *\n     * @private\n     * @function compose\n     *\n     * @param {ExportingClass} ExportingClass\n     * Exporting class.\n     *\n     * @requires modules/exporting\n     * @requires modules/offline-exporting\n     */\n    function compose(ExportingClass) {\n        // Add the downloadSVG event to the Exporting class for local PDF export\n        addEvent(ExportingClass, 'downloadSVG', async function (e) {\n            const { svg, exportingOptions, exporting, preventDefault } = e;\n            // Check if PDF export is requested\n            if (exportingOptions?.type === 'application/pdf') {\n                // Prevent the default export behavior\n                preventDefault?.();\n                // Run the PDF local export\n                try {\n                    // Get the final image options\n                    const { type, filename, scale, libURL } = external_highcharts_src_js_default_default().Exporting.prepareImageOptions(exportingOptions);\n                    // Local PDF download\n                    if (type === 'application/pdf') {\n                        // Must load pdf libraries first if not found. Don't\n                        // destroy the object URL yet since we are doing\n                        // things asynchronously\n                        if (!OfflineExporting_win.jspdf?.jsPDF) {\n                            // Get jspdf\n                            await OfflineExporting_getScript(`${libURL}jspdf.js`);\n                            // Get svg2pdf\n                            await OfflineExporting_getScript(`${libURL}svg2pdf.js`);\n                        }\n                        // Call the PDF download if SVG element found\n                        await downloadPDF(svg, scale, filename, exportingOptions?.pdfFont);\n                    }\n                }\n                catch (error) {\n                    // Try to fallback to the server\n                    await exporting?.fallbackToServer(exportingOptions, error);\n                }\n            }\n        });\n        // Check the composition registry for the OfflineExporting\n        if (!pushUnique(composed, 'OfflineExporting')) {\n            return;\n        }\n        // Adding wrappers for the deprecated functions\n        extend((external_highcharts_src_js_default_Chart_default()).prototype, {\n            exportChartLocal: async function (exportingOptions, chartOptions) {\n                await this.exporting?.exportChart(exportingOptions, chartOptions);\n                return;\n            }\n        });\n        // Update with defaults of the offline exporting module\n        setOptions(OfflineExporting_OfflineExportingDefaults);\n        // Additionaly, extend the menuItems with the offline exporting variants\n        const menuItems = getOptions().exporting?.buttons?.contextButton?.menuItems;\n        menuItems && menuItems.push('downloadPDF');\n    }\n    OfflineExporting.compose = compose;\n    /**\n     * Get data URL to an image of an SVG and call download on it options\n     * object:\n     * - **filename:** Name of resulting downloaded file without extension.\n     * Default is `chart`.\n     *\n     * - **type:** File type of resulting download. Default is `image/png`.\n     *\n     * - **scale:** Scaling factor of downloaded image compared to source.\n     * Default is `1`.\n     * - **libURL:** URL pointing to location of dependency scripts to download\n     * on demand. Default is the exporting.libURL option of the global\n     * Highcharts options pointing to our server.\n     *\n     * @function Highcharts.downloadSVGLocal\n     * @deprecated\n     *\n     * @param {string} svg\n     * The generated SVG\n     *\n     * @param {Highcharts.ExportingOptions} options\n     * The exporting options\n     *\n     */\n    async function downloadSVGLocal(svg, options) {\n        await external_highcharts_src_js_default_default().Exporting.prototype.downloadSVG.call(void 0, svg, options);\n    }\n    OfflineExporting.downloadSVGLocal = downloadSVGLocal;\n    /**\n     * Converts an SVG string into a PDF file and triggers its download. This\n     * function processes the SVG, applies necessary font adjustments, converts\n     * it to a PDF, and initiates the file download.\n     *\n     * @private\n     * @async\n     * @function downloadPDF\n     *\n     * @param {string} svg\n     * A string representation of the SVG markup to be converted into a PDF.\n     * @param {number} scale\n     * The scaling factor for the PDF output.\n     * @param {string} filename\n     * The name of the downloaded PDF file.\n     * @param {Highcharts.PdfFontOptions} [pdfFont]\n     * An optional object specifying URLs for different font variants (normal,\n     * bold, italic, bolditalic).\n     *\n     * @return {Promise<void>}\n     * A promise that resolves when the PDF has been successfully generated and\n     * downloaded.\n     *\n     * @requires modules/exporting\n     * @requires modules/offline-exporting\n     */\n    async function downloadPDF(svg, scale, filename, pdfFont) {\n        const svgNode = preparePDF(svg, pdfFont);\n        if (svgNode) {\n            // Loads all required fonts\n            await loadPdfFonts(svgNode, pdfFont);\n            // Transform SVG to PDF\n            const pdfData = await svgToPdf(svgNode, 0, scale);\n            // Download the PDF\n            OfflineExporting_downloadURL(pdfData, filename);\n        }\n    }\n    /**\n     * Loads and registers custom fonts for PDF export if non-ASCII characters\n     * are detected in the given SVG element. This function ensures that text\n     * content with special characters is properly rendered in the exported PDF.\n     *\n     * It fetches font files (if provided in `pdfFont`), converts them to\n     * base64, and registers them with jsPDF.\n     *\n     * @private\n     * @function loadPdfFonts\n     *\n     * @param {SVGElement} svgElement\n     * The generated SVG element containing the text content to be exported.\n     * @param {Highcharts.PdfFontOptions} [pdfFont]\n     * An optional object specifying URLs for different font variants (normal,\n     * bold, italic, bolditalic). If non-ASCII characters are not detected,\n     * fonts are not loaded.\n     *\n     * @requires modules/exporting\n     * @requires modules/offline-exporting\n     */\n    async function loadPdfFonts(svgElement, pdfFont) {\n        const hasNonASCII = (s) => (\n        // eslint-disable-next-line no-control-regex\n        /[^\\u0000-\\u007F\\u200B]+/.test(s));\n        // Register an event in order to add the font once jsPDF is initialized\n        const addFont = (variant, base64) => {\n            OfflineExporting_win.jspdf.jsPDF.API.events.push([\n                'initialized',\n                function () {\n                    this.addFileToVFS(variant, base64);\n                    this.addFont(variant, 'HighchartsFont', variant);\n                    if (!this.getFontList()?.HighchartsFont) {\n                        this.setFont('HighchartsFont');\n                    }\n                }\n            ]);\n        };\n        // If there are no non-ASCII characters in the SVG, do not use bother\n        // downloading the font files\n        if (pdfFont && !hasNonASCII(svgElement.textContent || '')) {\n            pdfFont = void 0;\n        }\n        // Add new font if the URL is declared, #6417\n        const variants = ['normal', 'italic', 'bold', 'bolditalic'];\n        // Shift the first element off the variants and add as a font.\n        // Then asynchronously trigger the next variant until variants are empty\n        let normalBase64;\n        for (const variant of variants) {\n            const url = pdfFont?.[variant];\n            if (url) {\n                try {\n                    const response = await OfflineExporting_win.fetch(url);\n                    if (!response.ok) {\n                        throw new Error(`Failed to fetch font: ${url}`);\n                    }\n                    const blob = await response.blob(), reader = new FileReader();\n                    const base64 = await new Promise((resolve, reject) => {\n                        reader.onloadend = () => {\n                            if (typeof reader.result === 'string') {\n                                resolve(reader.result.split(',')[1]);\n                            }\n                            else {\n                                reject(new Error('Failed to read font as base64'));\n                            }\n                        };\n                        reader.onerror = reject;\n                        reader.readAsDataURL(blob);\n                    });\n                    addFont(variant, base64);\n                    if (variant === 'normal') {\n                        normalBase64 = base64;\n                    }\n                }\n                catch (e) {\n                    // If fetch or reading fails, fallback to next variant\n                }\n            }\n            else {\n                // For other variants, fall back to normal text weight/style\n                if (normalBase64) {\n                    addFont(variant, normalBase64);\n                }\n            }\n        }\n    }\n    /**\n     * Prepares an SVG for PDF export by ensuring proper text styling and\n     * removing unnecessary elements. This function extracts an SVG element from\n     * a given SVG string, applies font styles inherited from parent elements,\n     * and removes text outlines and title elements to improve PDF rendering.\n     *\n     * @private\n     * @function preparePDF\n     *\n     * @param {string} svg\n     * A string representation of the SVG markup.\n     * @param {Highcharts.PdfFontOptions} [pdfFont]\n     * An optional object specifying URLs for different font variants (normal,\n     * bold, italic, bolditalic). If provided, the text elements are assigned a\n     * custom PDF font.\n     *\n     * @return {SVGSVGElement | null}\n     * Returns the parsed SVG element from the container or `null` if the SVG is\n     * not found.\n     *\n     * @requires modules/exporting\n     * @requires modules/offline-exporting\n     */\n    function preparePDF(svg, pdfFont) {\n        const dummySVGContainer = OfflineExporting_doc.createElement('div');\n        external_highcharts_src_js_default_AST_default().setElementHTML(dummySVGContainer, svg);\n        const textElements = dummySVGContainer.getElementsByTagName('text'), \n        // Copy style property to element from parents if it's not there.\n        // Searches up hierarchy until it finds prop, or hits the chart\n        // container\n        setStylePropertyFromParents = function (el, propName) {\n            let curParent = el;\n            while (curParent && curParent !== dummySVGContainer) {\n                if (curParent.style[propName]) {\n                    let value = curParent.style[propName];\n                    if (propName === 'fontSize' && /em$/.test(value)) {\n                        value = Math.round(parseFloat(value) * 16) + 'px';\n                    }\n                    el.style[propName] = value;\n                    break;\n                }\n                curParent = curParent.parentNode;\n            }\n        };\n        let titleElements, outlineElements;\n        // Workaround for the text styling. Making sure it does pick up\n        // settings for parent elements.\n        [].forEach.call(textElements, function (el) {\n            // Workaround for the text styling. making sure it does pick up\n            // the root element\n            ['fontFamily', 'fontSize']\n                .forEach((property) => {\n                setStylePropertyFromParents(el, property);\n            });\n            el.style.fontFamily = pdfFont?.normal ?\n                // Custom PDF font\n                'HighchartsFont' :\n                // Generic font (serif, sans-serif etc)\n                String(el.style.fontFamily &&\n                    el.style.fontFamily.split(' ').splice(-1));\n            // Workaround for plotband with width, removing title from text\n            // nodes\n            titleElements = el.getElementsByTagName('title');\n            [].forEach.call(titleElements, function (titleElement) {\n                el.removeChild(titleElement);\n            });\n            // Remove all .highcharts-text-outline elements, #17170\n            outlineElements =\n                el.getElementsByClassName('highcharts-text-outline');\n            while (outlineElements.length > 0) {\n                const outline = outlineElements[0];\n                if (outline.parentNode) {\n                    outline.parentNode.removeChild(outline);\n                }\n            }\n        });\n        return dummySVGContainer.querySelector('svg');\n    }\n    /**\n     * Transform from PDF to SVG.\n     *\n     * @async\n     * @private\n     * @function svgToPdf\n     *\n     * @param {Highcharts.SVGElement} svgElement\n     * The SVG element to convert.\n     * @param {number} margin\n     * The margin to apply.\n     * @param {number} scale\n     * The scale of the SVG.\n     *\n     * @requires modules/exporting\n     * @requires modules/offline-exporting\n     */\n    async function svgToPdf(svgElement, margin, scale) {\n        const width = (Number(svgElement.getAttribute('width')) + 2 * margin) *\n            scale, height = (Number(svgElement.getAttribute('height')) + 2 * margin) *\n            scale, pdfDoc = new OfflineExporting_win.jspdf.jsPDF(// eslint-disable-line new-cap\n        // Setting orientation to portrait if height exceeds width\n        height > width ? 'p' : 'l', 'pt', [width, height]);\n        // Workaround for #7090, hidden elements were drawn anyway. It comes\n        // down to https://github.com/yWorks/svg2pdf.js/issues/28. Check this\n        // later.\n        [].forEach.call(svgElement.querySelectorAll('*[visibility=\"hidden\"]'), function (node) {\n            node.parentNode.removeChild(node);\n        });\n        // Workaround for #13948, multiple stops in linear gradient set to 0\n        // causing error in Acrobat\n        const gradients = svgElement.querySelectorAll('linearGradient');\n        for (let index = 0; index < gradients.length; index++) {\n            const gradient = gradients[index];\n            const stops = gradient.querySelectorAll('stop');\n            let i = 0;\n            while (i < stops.length &&\n                stops[i].getAttribute('offset') === '0' &&\n                stops[i + 1].getAttribute('offset') === '0') {\n                stops[i].remove();\n                i++;\n            }\n        }\n        // Workaround for #15135, zero width spaces, which Highcharts uses\n        // to break lines, are not correctly rendered in PDF. Replace it\n        // with a regular space and offset by some pixels to compensate.\n        [].forEach.call(svgElement.querySelectorAll('tspan'), (tspan) => {\n            if (tspan.textContent === '\\u200B') {\n                tspan.textContent = ' ';\n                tspan.setAttribute('dx', -5);\n            }\n        });\n        // Transform from PDF to SVG\n        await pdfDoc.svg(svgElement, {\n            x: 0,\n            y: 0,\n            width,\n            height,\n            removeInvalid: true\n        });\n        // Return the output\n        return pdfDoc.output('datauristring');\n    }\n})(OfflineExporting || (OfflineExporting = {}));\n/* *\n *\n *  Default Export\n *\n * */\n/* harmony default export */ const OfflineExporting_OfflineExporting = (OfflineExporting);\n\n;// external \"./exporting.js\"\nvar x = (y) => {\n\tvar x = {}; __webpack_require__.d(x,\n    \ty); return x\n    } \n    var y = (x) => (() => (x))\n    const external_exporting_src_js_namespaceObject = x({  });\n;// ./code/es-modules/masters/modules/offline-exporting.js\n\n\n\n\n\n\nconst G = (external_highcharts_src_js_default_default());\n// Compatibility\nG.dataURLtoBlob = G.dataURLtoBlob || Extensions_DownloadURL.dataURLtoBlob;\nG.downloadSVGLocal = OfflineExporting_OfflineExporting.downloadSVGLocal;\nG.downloadURL = G.downloadURL || Extensions_DownloadURL.downloadURL;\n// Compose\nOfflineExporting_OfflineExporting.compose(G.Exporting);\n/* harmony default export */ const offline_exporting_src = ((external_highcharts_src_js_default_default()));\n\nexport { offline_exporting_src as default };\n"],"names":["__WEBPACK_EXTERNAL_MODULE__highcharts_src_js_8202131d__","OfflineExporting","__webpack_require__","n","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","external_highcharts_src_js_default_namespaceObject","external_highcharts_src_js_default_default","isSafari","win","document","doc","error","domurl","URL","webkitURL","dataURLtoBlob","dataURL","parts","replace","match","length","atob","ArrayBuffer","Uint8Array","Blob","createObjectURL","binStr","buf","binary","i","charCodeAt","Extensions_DownloadURL","downloadURL","filename","nav","navigator","createElement","String","msSaveOrOpenBlob","userAgent","Error","isOldEdgeBrowser","test","safariBlob","indexOf","download","href","body","appendChild","click","removeChild","open","location","getScript","scriptLocation","Promise","resolve","reject","head","getElementsByTagName","script","type","src","onload","onerror","external_highcharts_src_js_default_AST_namespaceObject","AST","external_highcharts_src_js_default_AST_default","external_highcharts_src_js_default_Chart_namespaceObject","Chart","external_highcharts_src_js_default_Chart_default","OfflineExporting_OfflineExportingDefaults","exporting","getOptions","setOptions","OfflineExporting_downloadURL","OfflineExporting_getScript","composed","OfflineExporting_doc","OfflineExporting_win","addEvent","extend","pushUnique","downloadPDF","svg","scale","pdfFont","svgNode","preparePDF","titleElements","outlineElements","dummySVGContainer","setElementHTML","textElements","setStylePropertyFromParents","el","propName","curParent","style","value","Math","round","parseFloat","parentNode","forEach","property","fontFamily","normal","split","splice","titleElement","getElementsByClassName","outline","querySelector","loadPdfFonts","svgToPdf","svgElement","normalBase64","s","addFont","variant","base64","jspdf","jsPDF","API","events","push","addFileToVFS","getFontList","HighchartsFont","setFont","textContent","url","response","fetch","ok","blob","reader","FileReader","onloadend","result","readAsDataURL","e","margin","width","Number","getAttribute","height","pdfDoc","querySelectorAll","node","gradients","index","stops","gradient","remove","tspan","setAttribute","x","y","removeInvalid","output","compose","ExportingClass","exportingOptions","preventDefault","libURL","Exporting","prepareImageOptions","fallbackToServer","exportChartLocal","chartOptions","exportChart","menuItems","buttons","contextButton","downloadSVGLocal","options","downloadSVG","OfflineExporting_OfflineExporting","G","offline_exporting_src","default"],"mappings":"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"}